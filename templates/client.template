import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios'

export interface RequestParams {
    path?: unknown, 
    query?: unknown,
    body?: unknown,
    header?: unknown,
}

export type RequestConfig<Params extends RequestParams> = AxiosRequestConfig<Params['body']>

export type RequestResponse<ResData, ReqParams extends RequestParams> = AxiosResponse<ResData, ReqParams['body']>

export interface Service<Params extends RequestParams, Data> {
    (params: Params, config?: RequestConfig<Params>): Promise<RequestResponse<Data, Params>>;
}
export interface NonParamsService<Data> {
    (config?: RequestConfig<never>): Promise<RequestResponse<Data, never>>;
}

class Client {
    readonly #instance: AxiosInstance

    constructor() {
        this.#instance = axios.create({
            baseURL: "",
        })
    }
    // 发起请求
    request<Params extends RequestParams, Data>(
        config: RequestConfig<Params>
    ): Promise<RequestResponse<Data, Params>> {
        return this.#instance.request(config);
    }

}

export default new Client()